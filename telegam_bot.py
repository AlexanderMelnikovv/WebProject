from telegram.ext import Application, MessageHandler, filters, ConversationHandler, \
    CommandHandler
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove
import asyncio
import json

count_puzzle = 1


async def get_help(update, context):
    await update.message.reply_text('–° –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ '
                                    '—Å–≤–æ–∏—Ö –Ω–∞–≤—ã–∫–æ–≤ —Ä–µ—à–µ–Ω–∏—è —à–∞—Ö–º–∞—Ç–Ω—ã—Ö –∑–∞–¥–∞—á. –≠—Ç–æ '
                                    '–æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ –ø–æ–º–æ–≥–∞–µ—Ç –≤ –∏–≥—Ä–µ. –í—ã –ø–æ—á—É–≤—Å—Ç–≤—É–µ—Ç–µ —ç—Ç–æ —Å–∞–º–∏, –∫–æ–≥–¥–∞ '
                                    '–ø–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á –≤ –ø–∞—Ä—Ç–∏–∏ —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –±–ª–µ—Å—Ç—è—â–∏–π —Ö–æ–¥, '
                                    '–∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ –ø–æ–±–µ–¥–µ.')


async def empty_function(update, context):
    await update.message.reply_text('–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é...')


async def get_start(update, context):
    with open('data/information.json', 'r', encoding='utf-8') as file:
        data = json.load(file)
        players = data['chess_players']
        training = data['chess_training']
        dict = data['chess_dictionary']
    context.user_data['chess_players'] = players
    context.user_data['chess_training'] = training
    context.user_data['chess_dictionary'] = dict
    reply_keyboard = [['/help', '/solve_puzzle']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False)
    await update.message.reply_text('–Ø –±–æ—Ç-—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫', reply_markup=markup)
    return 0


async def solve_puzzle(update, context):
    global count_puzzle
    chat_id = update.effective_message.chat_id
    if count_puzzle > 10:
        await update.message.reply_text('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–æ–ª—å—à–µ –Ω–µ—Ç –∑–∞–¥–∞—á. –ù–æ'
                                        ' —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –æ–Ω–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è!')
    await context.bot.sendPhoto(chat_id, photo=f'puzzle_{count_puzzle}.png')
    if count_puzzle % 2 == 1:
        await update.message.reply_text(f'–ù–∞–π–¥–∏ –ª—É—á—à–∏–π —Ö–æ–¥ –∑–∞ –±–µ–ª—ã—Ö')
    else:
        await update.message.reply_text(f'–ù–∞–π–¥–∏ –ª—É—á—à–∏–π —Ö–æ–¥ –∑–∞ —á—ë—Ä–Ω—ã—Ö')
    reply_keyboard = [['–í–≤–µ—Å—Ç–∏ —Ö–æ–¥'], ['/d', '/e', '/f']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False)
    await update.message.reply_text(reply_markup=markup)
    count_puzzle += 1


async def chess_players(update, context):
    await update.message.reply_text("–ü—Ä–æ –∫–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?"
                                    "–°–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–∫–∏—Ö –ª—é–¥—è—Ö:\n"
                                    "\u2714 –ì–∞—Ä—Ä–∏ –ö–∞—Å–ø–∞—Ä–æ–≤\n"
                                    "\u2714 –ê–Ω–∞—Ç–æ–ª–∏–π –ö–∞—Ä–ø–æ–≤\n"
                                    "\u2714 –ú–∞–≥–Ω—É—Å –ö–∞—Ä–ª—Å–µ–Ω\n"
                                    "\u2714 –ë–æ–±–±–∏ –§–∏—à–µ—Ä\n"
                                    "\u2714 –≠–º–∞–Ω—É–∏–ª –õ–∞—Å–∫–µ—Ä\n"
                                    "\u2714 –ú–∏—Ö–∞–∏–ª –ë–æ—Ç–≤–∏–Ω–Ω–∏–∫\n"
                                    "\u2714 –í–µ—Ä–∞ –ú–µ–Ω—á–∏–∫\n"
                                    "\u2714 –ù–æ–Ω–∞ –ì–∞–ø—Ä–∏–Ω–¥–∞—à–≤–∏–ª–∏\n"
                                    "\u2714 –ï–ª–∏–∑–∞–≤–µ—Ç–∞ –ë—ã–∫–æ–≤–∞\n"
                                    "\u2714 –Æ–¥–∏—Ç –ü–æ–ª–≥–∞—Ä\n"
                                    "\u2757–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —á–µ–ª–æ–≤–µ–∫–µ –≤–≤–µ–¥–∏—Ç–µ"
                                    " —Ç–æ–ª—å–∫–æ –µ–≥–æ —Ñ–∞–º–∏–ª–∏—é.", reply_markup=ReplyKeyboardRemove())
    return 1


async def information_about_chess_players(update, context):
    response = update.message.text.strip().lower()
    chess_player = context.user_data['chess_players'].get(response, None)
    if chess_player:
        await context.bot.send_photo(
            update.message.chat_id, chess_player['photo'])
        await update.message.reply_text(chess_player['biography'])
    else:
        await update.message.reply_text("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Ñ–∞–º–∏–ª–∏–∏ —á–µ–ª–æ–≤–µ–∫–∞"
                                        " –∏–ª–∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö")


async def training(update, context):
    if context.user_data.get('training level', -1) == -1:
        introduction = "–ñ–µ–ª–∞–µ–º —É–¥–∞—á–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è!\n"
        context.user_data['training level'] = 0
    elif context.user_data.get('training level', -1) == 0:
        introduction = "–í—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –æ–±—É—á–µ–Ω–∏–µ —Å–Ω–∞—á–∞–ª–∞.\n"
    else:
        introduction = "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ.\n" \
                       "–ï—Å–ª–∏ –∂–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ —Å–Ω–∞—á–∞–ª–∞, " \
                       "—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É."
    introduction += "\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π " \
                    '—É—Ä–æ–≤–µ–Ω—å –Ω–∞–∂–∏–º–∞–π—Ç–µ "‚ñ∂ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å".'
    reply_keyboard = [['üîÑ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', '‚ñ∂ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False, resize_keyboard=True)
    await update.message.reply_text(introduction, reply_markup=markup)
    return 2


async def chess_training(update, context):
    if update.message.text == '‚ñ∂ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å':
        context.user_data['training level'] += 1
        if context.user_data['training level'] == 14:
            await update.message.reply_text(context.user_data['chess_training'][
                                                str(context.user_data['training level'])],
                                            reply_markup=ReplyKeyboardRemove())
            return 0
        if type(context.user_data['chess_training'][
                    str(context.user_data['training level'])]['text']) == list:
            texts = context.user_data['chess_training'][str(context.user_data[
                                                                'training level'])]['text']
            photo = context.user_data['chess_training'][str(context.user_data[
                                                                'training level'])]['photo']
            for i in range(len(texts)):
                await context.bot.send_photo(
                    update.message.chat_id, photo[i], caption=texts[i])
                await asyncio.sleep(5)
        else:
            await update.message.reply_text(
                context.user_data['chess_training'][str(context.user_data['training level'])][
                    'text'])
            await context.bot.send_photo(
                update.message.chat_id,
                context.user_data['chess_training'][str(context.user_data['training level'])][
                    'photo'])
    elif update.message.text == 'üîÑ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ':
        context.user_data['training level'] = 0
        await update.message.reply_text('–í—ã –æ–±–Ω—É–ª–∏–ª–∏ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å')
    else:
        await update.message.reply_text('–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –≤–≤–æ–¥–∞.')


async def chess_dictionary(update, context):
    await update.message.reply_text('–í –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å'
                                    ' —É–∑–Ω–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–∫–æ–≥–æ –ª–∏–±–æ —à–∞—Ö–º–∞—Ç–Ω–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞.\n'
                                    '–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –≤–∏–¥–∞ "–ß—Ç–æ —Ç–∞–∫–æ–µ <—Ç–µ—Ä–º–∏–Ω>?"\n'
                                    '–ò, –µ—Å–ª–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ –∑–∞–ø—Ä–æ—Å –Ω–∞–π–¥–µ—Ç—Å—è, –≤—ã —É–≤–∏–¥–∏—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ.'
                                    '–ï—Å–ª–∏ –Ω–µ—Ç, –≤—ã —É–≤–∏–¥–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.')
    return 3


async def search_terms(update, context):
    req = update.message.text.lower()
    if '—á—Ç–æ —Ç–∞–∫–æ–µ' in ' '.join(req.split()) and req[-1] == '?':
        terms = ' '.join(req.split()[2:])[:-1]
        definition = context.user_data['chess_dictionary'].get(terms, None)
        if definition:
            await update.message.reply_text(definition)
        else:
            await update.message.reply_text('–í —Å–ª–æ–≤–∞—Ä–µ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å...')
    else:
        await update.message.reply_text('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–∏–¥!\n'
                                        '–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –≤–∏–¥–∞ "–ß—Ç–æ —Ç–∞–∫–æ–µ <—Ç–µ—Ä–º–∏–Ω>?"')


async def stop(update, context):
    await update.message.reply_text("–í—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏—é", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


def main():
    TOKEN = '5898517881:AAHwSba7YG8Lh_RgX7Z82yQvuDYkocnWKJM'
    application = Application.builder().token(TOKEN).build()
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', get_start)],
        states={
            0: [MessageHandler(filters.TEXT & ~filters.COMMAND, empty_function)],
            1: [MessageHandler(filters.TEXT & ~filters.COMMAND, information_about_chess_players)],
            2: [MessageHandler(filters.TEXT & ~filters.COMMAND, chess_training)],
            3: [MessageHandler(filters.TEXT & ~filters.COMMAND, search_terms)]
        },
        fallbacks=[CommandHandler('stop', stop), CommandHandler("training", training),
                   CommandHandler("chess_players", chess_players),
                   CommandHandler("chess_dictionary", chess_dictionary)]
    )
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler('help', get_help))
    application.add_handler(CommandHandler('solve_puzzle', solve_puzzle))
    application.run_polling()


if __name__ == '__main__':
    main()
